"""A PyFlow exporter definintion module"""

from datetime import datetime
from qtpy.QtWidgets import QFileDialog, QMessageBox  # pylint: disable=no-name-in-module

from PyFlow.UI.UIInterfaces import IDataExporter
from PyFlow.Core.version import Version
from PyFlow import GET_PACKAGES


from .implementation import PythonExporterImpl


class PythonExporter(IDataExporter):
    """This exporter writes the PyFlow graph into a pure Python script.
    
    LIMITATIONS:
      - multiple exec out pins are not fully supported
      - most of the heavy lifting is manual: for each node type a manual
        exporter have to be implemented
      - pythonNode is also manual: its up to the user to create the
        exporter function
    """

    name_filter = "PyFlow pure python scripts (*.py)"

    @staticmethod
    def createImporterMenu():  # type: ignore
        return False

    @staticmethod
    def creationDateString():
        return datetime.now().strftime("%I:%M%p on %B %d, %Y")

    @staticmethod
    def version():
        return Version(1, 0, 0)

    @staticmethod
    def toolTip():  # type: ignore
        return "Convert to Python script"

    @staticmethod
    def displayName():
        return "Python exporter"

    @staticmethod
    def doImport(pyFlowInstance):
        print("Import is not implemented!")

    @staticmethod
    def doExport(pyFlowInstance, outFilePath: str = ''):
        """Export graph as a runnable Python script."""

        header = f"""# -*- coding: utf-8 -*-

\"\"\"This file was auto-generated by PyFlow exporter
    '{PythonExporter.displayName()} v{PythonExporter.version()}'
    Created: {PythonExporter.creationDateString()}
\"\"\"

EXPORTER_NAME = '{PythonExporter.displayName()}'
EXPORTER_VERSION = '{PythonExporter.version()}'

"""

        root_graph = pyFlowInstance.graphManager.get().findRootGraph()

        if len(root_graph.getNodesList()) == 0:
            QMessageBox.warning(pyFlowInstance, "Warning", "Nothing to export!")
            return

        # get the list of converters
        converters: list[object] = []
        for pkg in GET_PACKAGES().values():
            if hasattr(pkg, 'GetCustomClasses'):
                curconverters = pkg.GetCustomClasses('Converters')
            elif hasattr(pkg, '_CONVERTERS'):
                # fallback until analyzePackage gets the second argument
                curconverters = pkg._CONVERTERS  # pylint: disable=protected-access
            else:
                # second fallback until analyzePackage gets the second argument
                # because normal packages do not have the above 2 attributes
                curconverters = None
            if curconverters is not None:
                converters.extend(curconverters.values())

        # initialize exporter
        root_exporter = PythonExporterImpl(root_graph, converters)

        # collect unconnected input exec pins in the root graph
        startpins = []
        for node in root_graph.getNodesList():
            for pin in node.inputs.values():
                if pin.isExec() and not pin.hasConnections():
                    startpins.append(pin)
            if node.__class__.__name__ == "graphInputs":
                for pin in node.outputs.values():
                    if pin.isExec():
                        startpins.append(pin)

        # iterate over all of them
        for start in startpins:
            root_exporter.add_call(f"""

# ------- {start.getFullName()} -------
""")
            root_exporter.export_from_pin(start)

        # save the script
        if outFilePath=='':
            outFilePath, _ = QFileDialog.getSaveFileName(
                filter=PythonExporter.name_filter
            )
        if outFilePath != "":
            with open(outFilePath, "w", encoding='utf8') as f:
                f.write(f"""{header}
# ======================== VARIABLES AND PARAMETERS SETUP =========================
{root_exporter.get_variables()}

# ================================ PACKAGE IMPORTS ================================
# pylint: disable=wrong-import-position
{root_exporter.get_imports()}
# pylint: enable=wrong-import-position

# ================================= PACKAGE SETUPS ================================
{root_exporter.get_setups()}

# ================================ SYSTEM FUNCTIONS ===============================
{root_exporter.get_sys_functions()}

# ============================== GRAPH IMPLEMENTATION =============================
{root_exporter.get_functions()}

# ================================== MAIN PROGRAM =================================
{root_exporter.get_calls()}
"""
                )
            print('saved!')
